#===================================================================================
# https://github.com/ccccmagicboy/MicroPython_fw_action
# Description: Build MicroPython firmware using GitHub Actions for ESP8266
# Lisence: MIT
# Author: ccccmagicboy
# Url: https://ccrobot-online.com
#===================================================================================

name: ESP8266_BUILD

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
    paths:
    - '.github/workflows/build_for_ESP8266.yml'
    - '!**.md'
  schedule:
    - cron: 0 8 * * *
  # watch:
    # types: [started]
    
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
# │ │ │ │ │                                   
# │ │ │ │ │
# │ │ │ │ │
# * * * * *  

env:
  REPO_URL: https://github.com/micropython/micropython.git
  REPO_BRANCH: master
  TOOLCHAIN_FROM_SCRATCH: false
  TOOLCHAIN_REPO_URL: https://github.com/pfalcon/esp-open-sdk.git
  TOOLCHAIN_REPO_BRANCH: master  
  TZ: Asia/Shanghai
  CUSTOM_MPCONFIGPORT: true
  ADD_MPY_FROZEN_MODULES: true
  ADD_NATIVE_C_MPY_MODULES: true
  ADD_EXTERNAL_C_MODULES: true
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-16.04
    
    strategy:
      max-parallel: 1
      matrix:
        test-board:
        - GENERIC
        - GENERIC_512K    

    steps:
    - name: Checkout this repos
      uses: actions/checkout@v2    
      
    - name: Install require for toolchain
      run: |
        sudo apt-get install make unrar-free autoconf automake libtool gcc g++ gperf \
        flex bison texinfo gawk ncurses-dev libexpat-dev python-dev sed git unzip \
        bash help2man wget bzip2 libtool-bin python-serial
        pip3 --version        
        pip3 install --upgrade pip
        pip3 install pyelftools

    - name: Clone the toolchain source code
      if: env.TOOLCHAIN_FROM_SCRATCH == 'true'
      run: git clone --recursive $TOOLCHAIN_REPO_URL -b $TOOLCHAIN_REPO_BRANCH my_toolchain

    - name: Build the toolchain and install it
      if: env.TOOLCHAIN_FROM_SCRATCH == 'true'
      run: |
        cd my_toolchain
        ls -al
        make
        ls -al
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_toolchain/xtensa-lx106-elf/bin:$PATH
        xtensa-lx106-elf-gcc --version
        
    - name: Down and install the toolchain
      if: env.TOOLCHAIN_FROM_SCRATCH == 'false'
      run: |
        mkdir -p my_toolchain
        cd my_toolchain
        curl -O http://www.kaltpost.de/~wendlers/micropython/xtensa-lx106-elf_linux64_latest.tar.bz2
        tar -jxvf xtensa-lx106-elf_linux64_latest.tar.bz2
        rm xtensa-lx106-elf_linux64_latest.tar.bz2
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_toolchain/xtensa-lx106-elf/bin:$PATH
        xtensa-lx106-elf-gcc --version
      
    - name: Clone the micropython source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH my_micropython
        git submodule update --init
        
    # - name: Clone the ulab external c modules
      # working-directory: ./c_modules
      # run: |
        # git clone https://github.com/v923z/micropython-ulab.git ulab
        # mkdir -p ./ESP8266/ulab
        # cp -R ./ulab/code/. ./ESP8266/ulab
        # ls -al ./ESP8266/ulab
        
    - name: Build the mpy-cross tool
      working-directory: ./my_micropython/mpy-cross
      run: |
        make
        
    - name: Build the unix port
      id: unix_port
      run: |
        cd my_micropython/ports/unix
        make submodules
        make
        find . -name "*micropython*"
        MOREF=$(./micropython -c "import sys;print('v{0:d}_{1:d}'.format(sys.implementation[1][0], sys.implementation[1][1]))")
        echo $MOREF
        echo "::set-output name=version::$MOREF"
        echo "::set-output name=board::${{ matrix.test-board }}"
        
    - name: Custom the mpconfigport.h file
      if: env.CUSTOM_MPCONFIGPORT == 'true'
      working-directory: ./my_micropython/ports/stm32/
      run: |
        echo "#define MODULE_EXAMPLE_ENABLED (1)" >> mpconfigport.h        
        
    - name: Add micropython frozen modules
      working-directory: ./my_micropython/ports/esp8266/boards
      if: env.ADD_MPY_FROZEN_MODULES == 'true'
      run: |
        echo "freeze('\$(MPY_DIR)/../modules/ESP8266')" >> manifest.py
        echo "freeze('\$(MPY_DIR)/../modules/Universal')" >> manifest.py
        echo "freeze('\$(PORT_DIR)/modules')" >> manifest.py   

    - name: upip micropython modules from internet
      working-directory: ./my_micropython/ports/unix
      run: |
        ./micropython -m upip install -p ../esp8266/modules micropython-pystone_lowmem        
        
    - name: Build the ESP8266 port
      run: |        
        cd my_micropython/ports/esp8266/
        pwd
        ls -al
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_toolchain/xtensa-lx106-elf/bin:$PATH        
        make BOARD=${{ matrix.test-board }} USER_C_MODULES=../../../c_modules/ESP8266 all
        ls -al
        
    - name: Get the datetime
      id: get_datetime
      uses: ccccmagicboy/get_datetime@master
      with:
        tz1: 'Asia'
        tz2: 'Shanghai'           
        
    - name: Zip the artifact
      run: |
        zip --junk-paths ESP8266_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ steps.get_datetime.outputs.datetime_str }} my_micropython/ports/esp8266/build-${{ matrix.test-board }}/firmware-combined.bin README.md MicroPython_fw_action_card.png
        
    - name: Upload the zip file
      uses: actions/upload-artifact@master
      with:
        name: ESP8266_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ steps.get_datetime.outputs.datetime_str }}
        path: ESP8266_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ steps.get_datetime.outputs.datetime_str }}.zip
            
    - name: Add native c mpy modules
      if: env.ADD_NATIVE_C_MPY_MODULES == 'true'
      working-directory: ./c_mpy_modules/
      run: |
        echo "[factorial]"
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_toolchain/xtensa-lx106-elf/bin:$PATH
        cd ./Universal/factorial
        make ARCH=xtensa
        ls -al
        
    - name: Upload c mpy file
      if: env.ADD_NATIVE_C_MPY_MODULES == 'true'    
      uses: actions/upload-artifact@master
      with:
        name: factorial
        path: c_mpy_modules/Universal/factorial/factorial.mpy  