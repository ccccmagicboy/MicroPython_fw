#===================================================================================
# https://github.com/ccccmagicboy/MicroPython_fw_action
# Description: Build MicroPython firmware using GitHub Actions for ESP32
# Lisence: MIT
# Author: ccccmagicboy
# Url: https://ccrobot-online.com
#===================================================================================

name: ESP32_BUILD

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
    paths:
    - '.github/workflows/build_for_ESP32.yml'
    - '!**.md'
  schedule:
    - cron: 0 8 * * *
  # watch:
    # types: [started]
    
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
# │ │ │ │ │                                   
# │ │ │ │ │
# │ │ │ │ │
# * * * * *  

env:
  REPO_URL: https://github.com/micropython/micropython.git
  REPO_BRANCH: master
  TOOLCHAIN_FROM_SCRATCH: false
  TZ: Asia/Shanghai
  DIY_MPY_MODULES: true
  DIY_C_MODULES: true
  
jobs:
  build:
    name: Build first
    runs-on: ubuntu-16.04
    
    strategy:
      matrix:
        test-board:
        - GENERIC
        - GENERIC_SPIRAM
        - GENERIC_D2WD
        - TINYPICO
        idf-select:
        - IDF3
        - IDF4

    steps:
    - name: Checkout this repos
      uses: actions/checkout@v2    
      
    - name: Get the python3
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
        architecture: 'x64'      

    - name: Install require for toolchain
      run: |
        sudo apt-get install gcc git wget make libncurses-dev flex \
        bison gperf python python-pip python-setuptools \
        python-cryptography python-future
        pip --version
        pip3 --version
        pip3 install --upgrade pip
        pip3 install pyserial 'pyparsing<2.4'
        
    - name: Down and install the toolchain
      if: env.TOOLCHAIN_FROM_SCRATCH == 'false'
      run: |
        mkdir -p my_toolchain
        cd my_toolchain
        curl -O https://dl.espressif.com/dl/xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        tar -xzf xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        rm xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_toolchain/xtensa-esp32-elf/bin:$PATH
        xtensa-esp32-elf-gcc --version
        
    - name: Clone the micropython source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH my_micropython
        git submodule update --init
        
    - name: Build the mpy-cross tool
      run: |
        cd my_micropython
        pwd
        ls -al
        make -C mpy-cross
        
    - name: Build the unix port
      id: unix_port
      run: |
        cd my_micropython/ports/unix
        make submodules
        make
        find . -name "*micropython*"
        MOREF=$(./micropython -c "import sys;print('v{0:d}_{1:d}'.format(sys.implementation[1][0], sys.implementation[1][1]))")
        echo $MOREF
        echo "::set-output name=version::$MOREF"
        echo "::set-output name=board::${{ matrix.test-board }}"

    - name: Get the IDF git hash of the only version(two of them)
      id: get_hash
      uses: ccccmagicboy/FW_esp32_get_IDF_hash_action@master
      with: 
        test: hahahaaaaa
        idf: ${{ matrix.idf-select }}
        
    - name: Print the hashs
      run: |
        echo ${{ steps.get_hash.outputs.test_out }} 
        echo ${{ steps.get_hash.outputs.hash_v3 }} 
        echo ${{ steps.get_hash.outputs.hash_v4 }}
        echo ${{ steps.get_hash.outputs.hash_selected }}
        
    - name: Download the ${{ matrix.idf-select }} from espressif and make the esp32 port - ${{ matrix.test-board }}
      run: |
        git clone https://github.com/espressif/esp-idf.git esp-idf
        cd esp-idf
        git checkout ${{ steps.get_hash.outputs.hash_selected }}
        git submodule update --init --recursive
        cd ..
        ls -l
        cd esp-idf
        pwd
        export ESPIDF=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/esp-idf
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_toolchain/xtensa-esp32-elf/bin:$PATH
        xtensa-esp32-elf-gcc --version        
        cd ../my_micropython/ports/esp32
        make clean
        make submodules
        make V=1 BOARD=${{ matrix.test-board }}

    - name: Get the datetime
      id: get_datetime
      uses: ccccmagicboy/get_datetime@master
      with:
        tz1: 'Asia'
        tz2: 'Shanghai'        
        
    - name: Zip the artifact
      run: |
        zip --junk-paths ESP32_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ matrix.idf-select }}_${{ steps.get_datetime.outputs.datetime_str }} my_micropython/ports/esp32/build-${{ matrix.test-board }}/firmware.bin README.md MicroPython_fw_action_card.png
        
    - name: Upload the zip file
      uses: actions/upload-artifact@master
      with:
        name: ESP32_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ matrix.idf-select }}_${{ steps.get_datetime.outputs.datetime_str }}
        path: ESP32_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ matrix.idf-select }}_${{ steps.get_datetime.outputs.datetime_str }}.zip        
        

        