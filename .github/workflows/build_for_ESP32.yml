#===================================================================================
# https://github.com/ccccmagicboy/MicroPython_fw_action
# Description: Build MicroPython firmware using GitHub Actions for ESP32
# Lisence: MIT
# Author: ccccmagicboy
# Url: https://ccrobot-online.com
#===================================================================================

name: ESP32_BUILD

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
    paths:
    - '.github/workflows/build_for_ESP32.yml'
    - '!**.md'
  schedule:
    - cron: 0 8 * * *
    
  # watch:
    # types: [started]
    
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
# │ │ │ │ │                                   
# │ │ │ │ │
# │ │ │ │ │
# * * * * *  

env:
  REPO_URL: https://github.com/ccccmagicboy/micropython.git
  REPO_BRANCH: use_40MHz_for_esp32_sdmmc
  # REPO_URL: https://github.com/micropython/micropython.git
  # REPO_BRANCH: master
  TOOLCHAIN_FROM_SCRATCH: false
  TZ: Asia/Shanghai
  ADD_CUSTOM_BOARD: true  
  CUSTOM_FACTORY_RESET: true  
  CUSTOM_MPCONFIGPORT: true
  ADD_MPY_FROZEN_MODULES: true
  ADD_NATIVE_C_MPY_MODULES: true
  ADD_EXTERNAL_C_MODULES: true
  ADD_PR: false
  USE_S3: false
  USB_DETACHED_HEAD: false
  USB_BIGGER_FLASH: true
  
jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04
    
    strategy:
      max-parallel: 6
      matrix:
        test-board:
        - GENERIC
        - GENERIC_SPIRAM
        # - GENERIC_D2WD
        - TINYPICO
        idf-select:
        - IDF3
        - IDF4
        #tag:
        # v1.12
        #- 1f371947309c5ea6023b6d9065415697cbc75578

    steps:
    - name: Checkout this repos
      uses: actions/checkout@v2    
      
    - name: Get the python3
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'
        architecture: 'x64'      

    - name: Install require for toolchain
      run: |
        sudo apt-get install gcc git wget make libncurses-dev flex \
        bison gperf python python-pip python-setuptools \
        python-cryptography python-future
        pip --version
        pip3 --version
        pip3 install --upgrade pip
        pip3 install pyserial 'pyparsing<2.4'
        pip3 install pyelftools
        # sudo apt install uncrustify
        pip3 install black
        black --version
        
    - name: Down and install the toolchain
      if: env.TOOLCHAIN_FROM_SCRATCH == 'false'
      run: |
        mkdir -p my_toolchain
        cd my_toolchain
        curl -O https://dl.espressif.com/dl/xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        tar -xzf xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        rm xtensa-esp32-elf-linux64-1.22.0-80-g6c4433a-5.2.0.tar.gz
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_toolchain/xtensa-esp32-elf/bin:$PATH
        xtensa-esp32-elf-gcc --version
        
    - name: Clone the micropython source code
      run: |
        git clone --recursive $REPO_URL -b $REPO_BRANCH my_micropython
       
    - name: Checkout for tag
      working-directory: ./my_micropython
      if: env.USB_DETACHED_HEAD == 'true'
      run: |
        git checkout ${{ matrix.tag }}
              
    - name: Add Custom boards support
      if: env.ADD_CUSTOM_BOARD == 'true'
      working-directory: ./my_micropython/ports/esp32/boards
      run: |
        echo "0000"           

    - name: Clone the ulab external c modules - https://github.com/v923z/micropython-ulab
      working-directory: ./c_modules
      run: |
        git clone https://github.com/v923z/micropython-ulab.git ulab
        mkdir -p ./ESP32/ulab
        cp -R ./ulab/code/. ./ESP32/ulab
        ls -al ./ESP32/ulab        
        
    - name: Clone the ST7789 external c modules
      working-directory: ./c_modules
      run: |
        # git clone https://github.com/devbis/st7789_mpy.git
        # git clone https://github.com/russhughes/st7789_mpy.git
        git clone https://github.com/ccccmagicboy/st7789_mpy.git
        mkdir -p ./ESP32/st7789
        cp -R ./st7789_mpy/st7789/. ./ESP32/st7789
        ls -al ./ESP32/st7789

    - name: Clone the ST7735 external c modules
      working-directory: ./c_modules
      run: |
        git clone https://github.com/ccccmagicboy/st7735_mpy.git
        mkdir -p ./ESP32/st7735
        cp -R ./st7735_mpy/st7735/. ./ESP32/st7735
        ls -al ./ESP32/st7735        

    - name: Clone the modbus py modules - https://github.com/pycom/pycom-modbus.git
      working-directory: ./modules
      run: |
        git clone https://github.com/pycom/pycom-modbus.git
        mkdir -p ./ESP32/uModbus
        cp -R ./pycom-modbus/uModbus/. ./ESP32/uModbus
        ls -al ./ESP32/uModbus

    - name: Clone the modbus py modules - https://github.com/techbase123/micropython-modbus.git
      working-directory: ./modules
      run: |
        git clone https://github.com/techbase123/micropython-modbus.git
        mkdir -p ./ESP32/Modbus
        cp -R ./micropython-modbus/*.py ./ESP32/Modbus
        ls -al ./ESP32/Modbus
        
    - name: Clone the driver for the BME280 sensor py modules - https://github.com/robert-hh/BME280.git
      working-directory: ./modules
      run: |
        git clone https://github.com/robert-hh/BME280.git
        mkdir -p ./ESP32/BME280
        cp -R ./BME280/*.py ./ESP32/BME280
        ls -al ./ESP32/BME280
        
    - name: Change the partitions.csv
      working-directory: ./
      run: |
        python -c "import os;from tools.mpy_cross_win_tool import replaceAll;mk_path = os.path.join(os.getcwd(), 'my_micropython', 'ports', 'esp32', 'partitions.csv');print(mk_path);replaceAll(mk_path, 'app,  factory, 0x10000, 0x180000', 'app,  factory, 0x10000, 0x1D0000')"
        # python -c "import os;from tools.mpy_cross_win_tool import replaceAll;mk_path = os.path.join(os.getcwd(), 'my_micropython', 'ports', 'esp32', 'partitions.csv');print(mk_path);replaceAll(mk_path, 'data, fat,     0x200000, 0x200000', 'data, fat,     0x200000, 0xE00000')"
        
        
    - name: Build the mpy-cross tool
      working-directory: ./my_micropython/mpy-cross
      run: |
        make
        
    - name: Build the unix port
      id: unix_port
      run: |
        cd my_micropython/ports/unix
        make submodules
        make
        find . -name "*micropython*"
        MOREF=$(./micropython -c "import sys;print('v{0:d}_{1:d}'.format(sys.implementation[1][0], sys.implementation[1][1]))")
        echo $MOREF
        echo "::set-output name=version::$MOREF"
        echo "::set-output name=board::${{ matrix.test-board }}"
        echo "::set-output name=gitid::$(git rev-parse --short HEAD)"
        echo "::set-output name=gitid2::$(git describe --tags --always --dirty=\"-dev\")"
   
    - name: Custom the mpconfigport.h file
      if: env.CUSTOM_MPCONFIGPORT == 'true'
      working-directory: ./my_micropython/ports/esp32/
      run: |
        echo "0000"
        # echo "#define MODULE_ST7789_ENABLED (1)" >> mpconfigport.h
        # echo "#define MODULE_ULAB_ENABLED (1)" >> mpconfigport.h
        # echo "#define MODULE_EXAMPLE_ENABLED (1)" >> mpconfigport.h
        # echo "#define MODULE_HELLO_ENABLED (1)" >> mpconfigport.h        
   
    - name: Add micropython frozen modules
      working-directory: ./my_micropython/ports/esp32/boards
      if: env.ADD_MPY_FROZEN_MODULES == 'true'
      run: |
        echo "freeze('\$(MPY_DIR)/../modules/ESP32')" >> manifest.py
        echo "freeze('\$(MPY_DIR)/../modules/Universal')" >> manifest.py
        echo "freeze('\$(MPY_DIR)/drivers/display', 'ssd1306.py')" >> manifest.py
        
    - name: upip micropython modules from internet
      if: env.ADD_MPY_FROZEN_MODULES == 'true'
      working-directory: ./my_micropython/ports/unix
      run: |
        ./micropython -m upip install -p ../esp32/modules micropython-pystone_lowmem     
        ./micropython -m upip install -p ../esp32/modules uiperf3
        ./micropython -m upip install -p ../esp32/modules micropython-urequests
        ./micropython -m upip install -p ../esp32/modules micropython-umqtt.simple

    - name: Custom the inisetup file
      if: env.CUSTOM_FACTORY_RESET == 'true'
      uses: ccccmagicboy/hack_inisetup@esp32_default
      with:
        cpu: 240
####################################################################################### 
    - name: test
      run: |
        echo "0000"
        
    - name: Commit first
      if: env.ADD_PR == 'true'
      id: commit_cccc
      working-directory: ./my_micropython
      run: |
        git config --global user.email "cuiwei_cv@163.com"
        git config --global user.name "cccc"
        git diff --name-only
        git commit -a -m "all my dirty things"
        git describe --tags --always --dirty="-dev"
        echo "::set-output name=ver::$(git describe --tags --always --dirty=\"-dev\")"
        
    # - name: Debug the action
      # uses: p3terx/debugger-action@master   
            
    - name: Apply new PR - https://github.com/micropython/micropython/pull/5695 -about sdcard
      if: env.ADD_PR == 'true'
      working-directory: ./my_micropython
      continue-on-error: false
      run: |
        git checkout master
        git fetch origin pull/5695/head:use_40MHz_for_esp32_sdmmc
        git branch -a
        git checkout use_40MHz_for_esp32_sdmmc
        export PICK=$(git rev-parse --short HEAD)
        echo $PICK
        git checkout master
        git rebase use_40MHz_for_esp32_sdmmc
        git log -10 --all --decorate --oneline --graph
        git status
        git describe --tags --always --dirty="-dev"
        git shortlog --no-merges master --not ${{ steps.commit_cccc.outputs.ver }}

    # - name: Apply new PR - https://github.com/micropython/micropython/pull/5608 -about rs485
        
    - name: Apply new PR - https://github.com/micropython/micropython/pull/5567 -about rs485    
      if: env.ADD_PR == 'true'  
      working-directory: ./my_micropython
      continue-on-error: false
      run: |
        git checkout master
        git fetch origin pull/5567/head:esp32-uart
        git branch -a
        git checkout esp32-uart 
        export PICK=$(git rev-parse --short HEAD)
        echo $PICK
        git checkout master
        git cherry-pick $PICK
        git log -10 --all --decorate --oneline --graph
        git status
        git describe --tags --always --dirty="-dev"
        git shortlog --no-merges master --not ${{ steps.commit_cccc.outputs.ver }}
        
    - name: Apply new PR - https://github.com/micropython/micropython/pull/4471 -about i2s
      if: env.ADD_PR == 'true'  
      working-directory: ./my_micropython
      continue-on-error: false
      run: |
        git checkout master
        git fetch origin pull/4471/head:esp32-i2s
        git branch -a
        git checkout esp32-i2s        
        export PICK=$(git rev-parse --short HEAD)
        echo $PICK
        git checkout master
        git cherry-pick $PICK
        git log -10 --all --decorate --oneline --graph
        git status
        git describe --tags --always --dirty="-dev"
        git shortlog --no-merges master --not ${{ steps.commit_cccc.outputs.ver }}
########################################################################################
        
    - name: Check the source code (formatter)
      working-directory: ./my_micropython/tools
      continue-on-error: true
      run: |
        git clone https://github.com/uncrustify/uncrustify.git uncrustify
        git -C uncrustify checkout uncrustify-0.70.1
        mkdir -p uncrustify/build
        cd uncrustify/build
        cmake ..
        make
        cd ../..
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_micropython/tools/uncrustify/build:$PATH
        python codeformat.py ../ports/esp32/machine_sdcard.c
        # git diff --exit-code

    - name: Get the IDF git hash of the only version(two of them)
      id: get_hash
      uses: ccccmagicboy/FW_esp32_get_IDF_hash_action@master
      with: 
        test: hahahaaaaa
        idf: ${{ matrix.idf-select }}
        
    - name: Print the hashs
      run: |
        echo ${{ steps.get_hash.outputs.test_out }} 
        echo ${{ steps.get_hash.outputs.hash_v3 }} 
        echo ${{ steps.get_hash.outputs.hash_v4 }}
        echo ${{ steps.get_hash.outputs.hash_selected }}
        
    - name: Download the ${{ matrix.idf-select }} from espressif and make the esp32 port - ${{ matrix.test-board }}
      run: |
        # git clone https://github.com/espressif/esp-idf.git esp-idf
        git clone https://github.com/ccccmagicboy/esp-idf.git esp-idf
        cd esp-idf
        git checkout ${{ steps.get_hash.outputs.hash_selected }}
        git submodule update --init --recursive
        cd ..
        ls -l
        cd esp-idf
        pwd
        export ESPIDF=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/esp-idf
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_toolchain/xtensa-esp32-elf/bin:$PATH
        xtensa-esp32-elf-gcc --version        
        cd ../my_micropython/ports/esp32
        make clean
        make submodules
        make V=1 BOARD=${{ matrix.test-board }} USER_C_MODULES=../../../c_modules/ESP32 all

    - name: Get the datetime
      id: get_datetime
      uses: ccccmagicboy/get_datetime@master
      with:
        tz1: 'Asia'
        tz2: 'Shanghai'        
        
    - name: Zip the artifact
      run: |
        zip --junk-paths ESP32_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ matrix.idf-select }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }} my_micropython/ports/esp32/build-${{ matrix.test-board }}/firmware.bin README.md MicroPython_fw_action_card.png
        
    - name: Zip the artifact
      run: |
        zip -r frozen_modules my_micropython/ports/esp32/modules modules/ESP32 README.md MicroPython_fw_action_card.png
                
    - name: Upload the zip file
      uses: actions/upload-artifact@master
      with:
        name: ESP32_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ matrix.idf-select }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }}
        path: ESP32_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ matrix.idf-select }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }}.zip        
        
    - name: Upload the zip file
      uses: actions/upload-artifact@master
      with:
        name: machine_sdcard
        path: my_micropython/ports/esp32/machine_sdcard.c   
        
    - name: Upload the zip file
      uses: actions/upload-artifact@master
      with:
        name: frozen_modules
        path: frozen_modules.zip
             
    - name: Add native c mpy modules
      if: env.ADD_NATIVE_C_MPY_MODULES == 'true'
      working-directory: ./c_mpy_modules/
      run: |
        echo "[factorial]"
        export PATH=/home/runner/work/MicroPython_fw_action/MicroPython_fw_action/my_toolchain/xtensa-esp32-elf/bin:$PATH
        cd ./Universal/factorial
        make ARCH=xtensawin
        
    - name: Upload c mpy file
      if: env.ADD_NATIVE_C_MPY_MODULES == 'true'    
      uses: actions/upload-artifact@master
      with:
        name: factorial
        path: c_mpy_modules/Universal/factorial/factorial.mpy 

    - name: Upload to amazon S3
      if: env.USE_S3 == 'true'
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        pip3 install awscli
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION
        aws configure list
        aws s3 cp ./ESP32_${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}_${{ matrix.idf-select }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }}.zip s3://${AWS_S3_BUCKET}/ESP32/${{ steps.unix_port.outputs.board }}/        


