#===================================================================================
# https://github.com/ccccmagicboy/MicroPython_fw_action
# Description: Build MicroPython firmware using GitHub Actions for STM32
# Lisence: MIT
# Author: ccccmagicboy
# Url: https://ccrobot-online.com
#===================================================================================

name: STM32_BUILD

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
    paths-ignore:
    - '**.md'
  schedule:
    - cron: 0 8 * * 5
  # watch:
    # types: [started]

env:
  REPO_URL: https://github.com/micropython/micropython.git
  REPO_BRANCH: master
  UPLOAD_FIRMWARE: true
  MAKE_A_RELEASE_DRAFT: false
  TZ: Asia/Shanghai
  DIY_MPY_MODULES: true
  DIY_C_MODULES: true
  BOARD: PYBV11

jobs:
  build:
    runs-on: ubuntu-16.04

    steps:
    - name: Checkout this repos
      uses: actions/checkout@v2    

    - name: Clone the micropython source code
      #depth用于指定克隆深度，为1即表示只克隆最近一次commit.
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH my_micropython

    - name: get the cross-toolchain
      run: |
        sudo apt-get install gcc-arm-none-eabi
        sudo apt-get install gcc
      
    - name: build the mpy-cross tool
      run: |
        cd my_micropython
        pwd
        ls -al
        make -C mpy-cross
        
    - name: Build the unix port
      id: unix_port
      run: |
        cd my_micropython/ports/unix
        make submodules
        make
        find . -name "*micropython*"
        MOREF=$(./micropython -c "import sys;print('v{0:d}.{1:d}'.format(sys.implementation[1][0], sys.implementation[1][1]))")
        echo $MOREF
        echo "::set-output name=version::$MOREF"
        echo "::set-output name=board::$BOARD"
        
    - name: Print the version
      run: |
        echo ${{ steps.unix_port.outputs.version }}
        
    - name: Build the submodules of stm32 port
      run: |        
        cd my_micropython/ports/stm32/
        pwd
        ls -al
        make submodules
        
    - name: DIY micropython modules
      if: env.DIY_MPY_MODULES == 'true'
      run: echo "0"
      #uses: ccccmagicboy/FW_DIY_mpy_modules_action@master      

    - name: DIY c modules
      if: env.DIY_C_MODULES == 'true'
      run: echo "0"
      #uses: ccccmagicboy/FW_DIY_c_modules_action@master        
        
    - name: Build the dfu file
      run: |        
        cd my_micropython/ports/stm32/
        pwd
        ls -al
        make BOARD=$BOARD
        
    - name: Zip the artifact
      run: |
        zip --junk-paths ${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }} my_micropython/ports/stm32/build-$BOARD/firmware.dfu README.md MicroPython_fw_action_card.png

    - name: Upload Zip file
      uses: actions/upload-artifact@master
      with:
        name: ${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}.zip
        path: ${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}.zip
        
    - name: Create Release
      if: env.MAKE_A_RELEASE_DRAFT == 'true'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
      with:
        tag_name: v1.0
        release_name: v1.0
        body: |
          Changes in this Release
          - First Change
          - Second Change
          - XXX
        draft: true
        prerelease: false
        
    - name: Upload Release Asset
      if: env.MAKE_A_RELEASE_DRAFT == 'true'
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}.zip
        asset_name: ${{ steps.unix_port.outputs.board }}_fw_${{ steps.unix_port.outputs.version }}.zip
        asset_content_type: application/zip        