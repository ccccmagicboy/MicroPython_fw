#===================================================================================
# https://github.com/ccccmagicboy/MicroPython_fw_action
# Description: Build MicroPython firmware using GitHub Actions for STM32
# Lisence: MIT
# Author: ccccmagicboy
# Url: https://ccrobot-online.com
#===================================================================================

name: STM32_BUILD

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
    paths:
    - '.github/workflows/build_for_STM32.yml'
    - '!**.md'
    - c_modules/STM32/**
    
  schedule:
    - cron: 0 8 * * *
  # watch:
    # types: [started]
    
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
# │ │ │ │ │                                   
# │ │ │ │ │
# │ │ │ │ │
# * * * * *    

env:
  REPO_URL: https://github.com/micropython/micropython.git
  REPO_BRANCH: master
  UPLOAD_FIRMWARE: true
  MAKE_A_RELEASE_DRAFT: false
  TZ: Asia/Shanghai
  ADD_CUSTOM_BOARD: true
  CUSTOM_FACTORY_RESET: true
  CUSTOM_USB_STRING: true
  CUSTOM_MPCONFIGPORT: true
  ADD_MPY_FROZEN_MODULES: true
  ADD_NATIVE_C_MPY_MODULES: true
  ADD_EXTERNAL_C_MODULES: true
  USE_MBOOT: true
  USE_S3: false
  USB_DETACHED_HEAD: false  

jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04

    strategy:
      max-parallel: 2
      matrix:
        test-board:
        - PYBV11
        #- NUCLEO_F429ZI
        #- STM32F429DISC
        #- OLIMEX_E407
        #support H7 series
        - NUCLEO_H743ZI
        #support ethernet RMII
        #- NUCLEO_F767ZI
        # - PYBLITEV10
        # - PYBV10
        tag:
        # v1.12
        - master
        
    
    steps:
    - name: Checkout this repos
      uses: actions/checkout@v2    
      
    - name: Clone the micropython source code
      run: |
        git clone --recursive $REPO_URL -b $REPO_BRANCH my_micropython
       
    - name: Checkout
      working-directory: ./my_micropython
      if: env.USB_DETACHED_HEAD == 'true'
      run: |
        git checkout ${{ matrix.tag }}      
      
    - name: Add Custom boards support
      if: env.ADD_CUSTOM_BOARD == 'true'
      working-directory: ./my_micropython/ports/stm32/boards
      run: |
        echo "0000"
      
    - name: Clone the ulab external c modules
      working-directory: ./c_modules
      run: |
        git clone https://github.com/v923z/micropython-ulab.git ulab
        mkdir -p ./STM32/ulab
        cp -R ./ulab/code/. ./STM32/ulab
        ls -al ./STM32/ulab

    - name: Get the cross-toolchain
      run: |
        sudo apt-get install gcc-arm-none-eabi
        sudo apt-get install gcc
        pip3 --version        
        pip3 install --upgrade pip
        pip3 install pyelftools
      
    - name: Build the mpy-cross tool
      working-directory: ./my_micropython/mpy-cross
      run: |
        make
        
    - name: Build the unix port
      id: unix_port
      run: |
        cd my_micropython/ports/unix
        make submodules
        make
        find . -name "*micropython*"
        MOREF=$(./micropython -c "import sys;print('v{0:d}_{1:d}'.format(sys.implementation[1][0], sys.implementation[1][1]))")
        echo $MOREF
        echo "::set-output name=version::$MOREF"
        echo "::set-output name=board::${{ matrix.test-board }}"
        echo "::set-output name=gitid::$(git rev-parse --short HEAD)"
        
    - name: Print the version
      run: |
        echo ${{ steps.unix_port.outputs.version }}
        
    - name: Build the submodules of stm32 port
      working-directory: ./my_micropython/ports/stm32
      run: |      
        make submodules
        
    - name: Custom the factoryreset.c file
      if: env.CUSTOM_FACTORY_RESET == 'true'
      run: |
        echo "0"

    - name: Custom the usbd_desc.c file
      if: env.CUSTOM_USB_STRING == 'true'
      run: |
        echo "0"        
      
    - name: Custom the mpconfigport.h file
      if: env.CUSTOM_MPCONFIGPORT == 'true'
      working-directory: ./my_micropython/ports/stm32/
      run: |
        # echo "#define MODULE_ULAB_ENABLED (1)" >> mpconfigport.h
        echo "#define MODULE_EXAMPLE_ENABLED (1)" >> mpconfigport.h
        echo "#define MODULE_HELLO_ENABLED (1)" >> mpconfigport.h
        echo "#define MODULE_C_SAMPLE_ENABLED (1)" >> mpconfigport.h
                
    - name: Add micropython frozen modules
      working-directory: ./my_micropython/ports/stm32/boards
      if: env.ADD_MPY_FROZEN_MODULES == 'true'
      run: |
        echo "freeze('\$(MPY_DIR)/../modules/STM32')" >> manifest.py
        echo "freeze('\$(MPY_DIR)/../modules/Universal')" >> manifest.py
        echo "freeze('\$(PORT_DIR)/modules')" >> manifest.py
        
    - name: upip micropython modules from internet
      working-directory: ./my_micropython/ports/unix
      run: |
        ./micropython -m upip install -p ../stm32/modules micropython-pystone_lowmem

    - name: Add native c mpy modules
      if: env.ADD_NATIVE_C_MPY_MODULES == 'true'
      working-directory: ./c_mpy_modules/
      run: |
        echo "[factorial]"
        cd ./Universal/factorial
        make ARCH=armv7emsp
        
    - name: Upload c mpy file
      if: env.ADD_NATIVE_C_MPY_MODULES == 'true'
      uses: actions/upload-artifact@master
      with:
        name: factorial
        path: c_mpy_modules/Universal/factorial/factorial.mpy
        
    - name: Build the Mboot
      if: env.USE_MBOOT == 'true'
      working-directory: ./my_micropython/ports/stm32/mboot
      run: |
        cp fwupdate.py ../modules
        cp mboot.py ../modules
        make BOARD=${{ matrix.test-board }} USE_MBOOT=1 clean all
        ls -al ./build-${{ matrix.test-board }}
        cd build-${{ matrix.test-board }}
        cp firmware.dfu mboot.dfu
        cp firmware.bin mboot.bin
        
    - name: Build the dfu file - ${{ matrix.test-board }}
      id: build_no_mboot
      if: env.USE_MBOOT == 'false'
      working-directory: ./my_micropython/ports/stm32/
      run: |
        make BOARD=${{ matrix.test-board }} USER_C_MODULES=../../../c_modules/STM32 MICROPY_PY_WIZNET5K=5500 clean all
        ls -al ./build-${{ matrix.test-board }}
        echo "::set-output name=mboot::no_mboot"

    - name: Build the dfu file - ${{ matrix.test-board }}
      id: build_mboot
      if: env.USE_MBOOT == 'true'
      working-directory: ./my_micropython/ports/stm32/
      run: |
        make BOARD=${{ matrix.test-board }} USE_MBOOT=1 USER_C_MODULES=../../../c_modules/STM32 MICROPY_PY_WIZNET5K=5500 clean all
        ls -al ./build-${{ matrix.test-board }}
        cd ./build-${{ matrix.test-board }}
        gzip -k firmware.dfu
        ls -al firmware*
        echo "::set-output name=mboot::mboot"
        
    - name: Build the first time st hard dfu file
      if: env.USE_MBOOT == 'true'
      working-directory: ./my_micropython/ports/stm32/
      run: |
        python ../../tools/dfu.py -b 0x08000000:mboot/build-${{ matrix.test-board }}/mboot.bin -b 0x08020000:build-${{ matrix.test-board }}/firmware.bin build-${{ matrix.test-board }}/firmware_all.dfu
        
    - name: Get the datetime
      id: get_datetime
      uses: ccccmagicboy/get_datetime@master
      with:
        tz1: 'Asia'
        tz2: 'Shanghai'            
        
    - name: Zip the artifact
      if: env.USE_MBOOT == 'true'
      run: |
        zip --junk-paths ${{ steps.unix_port.outputs.board }}_${{ steps.build_no_mboot.outputs.mboot}}${{ steps.build_mboot.outputs.mboot}}_fw_${{ steps.unix_port.outputs.version }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }} my_micropython/ports/stm32/build-${{ matrix.test-board }}/firmware.dfu.gz my_micropython/ports/stm32/build-${{ matrix.test-board }}/firmware_all.dfu my_micropython/ports/stm32/mboot/build-${{ matrix.test-board }}/mboot.dfu README.md MicroPython_fw_action_card.png
        
    - name: Zip the artifact
      if: env.USE_MBOOT == 'false'
      run: |
        zip --junk-paths ${{ steps.unix_port.outputs.board }}_${{ steps.build_no_mboot.outputs.mboot}}${{ steps.build_mboot.outputs.mboot}}_fw_${{ steps.unix_port.outputs.version }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }} my_micropython/ports/stm32/build-${{ matrix.test-board }}/firmware.dfu README.md MicroPython_fw_action_card.png

    - name: Upload the Zip file
      uses: actions/upload-artifact@master
      with:
        name: ${{ steps.unix_port.outputs.board }}_${{ steps.build_no_mboot.outputs.mboot}}${{ steps.build_mboot.outputs.mboot}}_fw_${{ steps.unix_port.outputs.version }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }}
        path: ${{ steps.unix_port.outputs.board }}_${{ steps.build_no_mboot.outputs.mboot}}${{ steps.build_mboot.outputs.mboot}}_fw_${{ steps.unix_port.outputs.version }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }}.zip
              
    - name: Upload to amazon S3
      if: env.USE_S3 == true
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        pip3 install awscli
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION
        aws configure list
        aws s3 cp ./${{ steps.unix_port.outputs.board }}_${{ steps.build_no_mboot.outputs.mboot}}${{ steps.build_mboot.outputs.mboot}}_fw_${{ steps.unix_port.outputs.version }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }}.zip s3://${AWS_S3_BUCKET}/STM32/${{ steps.unix_port.outputs.board }}/


        