#===================================================================================
# https://github.com/ccccmagicboy/MicroPython_fw_action
# Description: Build MicroPython firmware using GitHub Actions for openmv
# Lisence: MIT
# Author: ccccmagicboy
# Url: https://ccrobot-online.com
#===================================================================================

name: openmv_BUILD

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
    paths:
    - '.github/workflows/build_for_openmv.yml'
    - '!**.md'
    
  schedule:
    - cron: 0 11 * * *
  # watch:
    # types: [started]
    
# ┌───────────── minute (0 - 59)
# │ ┌───────────── hour (0 - 23)
# │ │ ┌───────────── day of the month (1 - 31)
# │ │ │ ┌───────────── month (1 - 12 or JAN-DEC)
# │ │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
# │ │ │ │ │                                   
# │ │ │ │ │
# │ │ │ │ │
# * * * * *    

env:
  REPO_URL: https://github.com/openmv/openmv.git
  REPO_BRANCH: master
  UPLOAD_FIRMWARE: true
  MAKE_A_RELEASE_DRAFT: false
  TZ: Asia/Shanghai
  ADD_CUSTOM_BOARD: true
  CUSTOM_FACTORY_RESET: true
  CUSTOM_MPCONFIGPORT: true
  ADD_MPY_FROZEN_MODULES: true
  ADD_NATIVE_C_MPY_MODULES: true
  ADD_EXTERNAL_C_MODULES: true
  USE_MBOOT: true
  USE_S3: false
  USB_DETACHED_HEAD: false  

jobs:
  build:
    name: Build
    runs-on: ubuntu-18.04

    strategy:
      max-parallel: 2
      matrix:
        test-board:
        - PYBV11
        tag:
        # v1.12
        - master
        
    steps:
    - name: Checkout this repos
      uses: actions/checkout@v2    
      
    - name: Clone the micropython source code
      run: |
        git clone --recursive $REPO_URL -b $REPO_BRANCH
       
    - name: Checkout
      working-directory: ./openmv
      if: env.USB_DETACHED_HEAD == 'true'
      run: |
        git checkout ${{ matrix.tag }}      
   
    - name: Get the cross-toolchain
      run: |
        sudo apt-get install gcc-arm-none-eabi
        sudo apt-get install gcc-multilib
        pip3 install --upgrade pip
        pip3 install pyelftools
        
    - name: Build the mpy-cross tool
      working-directory: ./openmv/src/micropython/mpy-cross
      run: |
        make        
        
    - name: Build
      working-directory: ./openmv/src
      run: |
        make V=1 TARGET=OPENMV4 all
        ls -al
        ls ./build -al
                      
    - name: Get the datetime
      id: get_datetime
      uses: ccccmagicboy/get_datetime@master
      with:
        tz1: 'Asia'
        tz2: 'Shanghai'
        
    - name: Zip the artifact
      if: env.USE_MBOOT == 'true'
      run: |
        zip --junk-paths xxx.dfu README.md MicroPython_fw_action_card.png
        
    - name: Upload the Zip file
      uses: actions/upload-artifact@master
      with:
        name: xxx
        path: xxx.zip
              
    - name: Upload to amazon S3
      if: env.USE_S3 == true
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        pip3 install awscli
        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
        aws configure set region $AWS_REGION
        aws configure list
        aws s3 cp ./${{ steps.unix_port.outputs.board }}_${{ steps.build_no_mboot.outputs.mboot}}${{ steps.build_mboot.outputs.mboot}}_fw_${{ steps.unix_port.outputs.version }}_${{ steps.unix_port.outputs.gitid }}_${{ steps.get_datetime.outputs.datetime_str }}.zip s3://${AWS_S3_BUCKET}/STM32/${{ steps.unix_port.outputs.board }}/


        